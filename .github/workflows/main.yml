name: Generate PR Summary

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - AddTicketDetails
  workflow_dispatch:  # Allow manual testing

jobs:
  generate-summary:
    runs-on: ubuntu-latest
    # Only run if the PR was actually merged (not just closed)
    if: github.event.pull_request.merged == true
    permissions:
      contents: read
      pull-requests: write  # Needed to comment on PRs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better diff context
          
      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Get PR basic info
            const prInfo = {
              number: pr.number,
              title: pr.title,
              body: pr.body,
              author: pr.user.login,
              base_branch: pr.base.ref,
              head_branch: pr.head.ref,
              created_at: pr.created_at,
              updated_at: pr.updated_at
            };
            
            // Get list of changed files
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const fileChanges = files.data.map(file => ({
              filename: file.filename,
              status: file.status,
              additions: file.additions,
              deletions: file.deletions,
              changes: file.changes,
              patch: file.patch  // The actual diff
            }));
            
            // Get commits
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const commitMessages = commits.data.map(c => ({
              sha: c.sha.substring(0, 7),
              message: c.commit.message,
              author: c.commit.author.name
            }));
            
            const output = {
              pr: prInfo,
              files: fileChanges,
              commits: commitMessages,
              stats: {
                total_files: files.data.length,
                total_additions: files.data.reduce((sum, f) => sum + f.additions, 0),
                total_deletions: files.data.reduce((sum, f) => sum + f.deletions, 0)
              }
            };
            
            // Save to file for next step
            const fs = require('fs');
            fs.writeFileSync('pr-data.json', JSON.stringify(output, null, 2));
            
            return output;
      
      - name: Extract Jira Ticket
        id: jira-ticket
        run: |
          # Get the head branch name
          HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "Branch name: $HEAD_BRANCH"
          
          # Check if branch starts with "PL" and extract ticket ID
          if [[ "$HEAD_BRANCH" =~ ^PL(.{6}) ]]; then
            JIRA_TICKET="PL${BASH_REMATCH[1]}"
            echo "✅ Found Jira ticket: $JIRA_TICKET"
            echo "jira_ticket=$JIRA_TICKET" >> $GITHUB_OUTPUT
            echo "has_jira=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ No Jira ticket found in branch name (doesn't start with PL)"
            echo "has_jira=false" >> $GITHUB_OUTPUT
            echo "jira_ticket=" >> $GITHUB_OUTPUT
          fi
      
      - name: Fetch Jira Issue Details
        id: jira-details
        if: steps.jira-ticket.outputs.has_jira == 'true'
        env:
          JIRA_API_TOKEN: ${{ secrets.ATLASSIAN_TOKEN }}
          JIRA_USER: a.awasthi@method.me
        run: |
          JIRA_TICKET="${{ steps.jira-ticket.outputs.jira_ticket }}"
          
          echo "Fetching Jira issue details for $JIRA_TICKET..."
          
          # First, get all fields to find the custom field IDs
          echo "Getting field metadata..."
          FIELDS_RESPONSE=$(curl -s -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -X GET \
            -H "Accept: application/json" \
            "https://method.atlassian.net/rest/api/3/field")
          
          # Find the custom field IDs for Analysis Results and Resolution Details
          ANALYSIS_FIELD=$(echo "$FIELDS_RESPONSE" | jq -r '.[] | select(.name == "Analysis Results") | .id')
          RESOLUTION_FIELD=$(echo "$FIELDS_RESPONSE" | jq -r '.[] | select(.name == "Resolution Details") | .id')
          
          echo "Analysis Results field ID: $ANALYSIS_FIELD"
          echo "Resolution Details field ID: $RESOLUTION_FIELD"
          
          # Fetch issue from Jira API with the custom fields
          JIRA_RESPONSE=$(curl -s -u "$JIRA_USER:$JIRA_API_TOKEN" \
            -X GET \
            -H "Accept: application/json" \
            "https://method.atlassian.net/rest/api/3/issue/$JIRA_TICKET?fields=$ANALYSIS_FIELD,$RESOLUTION_FIELD")
          
          echo "Jira API Response:"
          echo "$JIRA_RESPONSE"
          
          # Check if the request was successful
          if echo "$JIRA_RESPONSE" | jq -e '.errorMessages' > /dev/null 2>&1; then
            echo "⚠️ Warning: Could not fetch Jira issue details"
            echo "jira_analysis=" >> $GITHUB_OUTPUT
            echo "jira_resolution=" >> $GITHUB_OUTPUT
            echo "has_jira_details=false" >> $GITHUB_OUTPUT
          else
            # Extract Analysis Results (it's in ADF format)
            ANALYSIS_RAW=$(echo "$JIRA_RESPONSE" | jq -r ".fields.\"$ANALYSIS_FIELD\"")
            
            # If analysis exists and is not null, extract text content from ADF
            if [ "$ANALYSIS_RAW" != "null" ] && [ -n "$ANALYSIS_RAW" ]; then
              # Extract all text nodes from ADF document recursively
              JIRA_ANALYSIS=$(echo "$ANALYSIS_RAW" | jq -r '.. | select(.type? == "text") | .text' | tr '\n' ' ' | head -c 1000)
              echo "jira_analysis=$JIRA_ANALYSIS" >> $GITHUB_OUTPUT
            else
              echo "jira_analysis=No analysis available" >> $GITHUB_OUTPUT
            fi
            
            # Extract Resolution Details (also in ADF format)
            RESOLUTION_RAW=$(echo "$JIRA_RESPONSE" | jq -r ".fields.\"$RESOLUTION_FIELD\"")
            
            if [ "$RESOLUTION_RAW" != "null" ] && [ -n "$RESOLUTION_RAW" ]; then
              JIRA_RESOLUTION=$(echo "$RESOLUTION_RAW" | jq -r '.. | select(.type? == "text") | .text' | tr '\n' ' ' | head -c 1000)
              echo "jira_resolution=$JIRA_RESOLUTION" >> $GITHUB_OUTPUT
            else
              echo "jira_resolution=No resolution details available" >> $GITHUB_OUTPUT
            fi
            
            echo "has_jira_details=true" >> $GITHUB_OUTPUT
            echo "✅ Jira details fetched successfully"
            echo "Analysis Results preview: $JIRA_ANALYSIS"
            echo "Resolution Details preview: $JIRA_RESOLUTION"
          fi
      
      - name: Generate AI Summary
        id: ai-summary
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_KEY }}
        run: |
          # Read the PR data
          PR_DATA=$(cat pr-data.json)
          
          # Create prompt for Claude
          PROMPT="You are a technical reviewer with 10 years of experience. Generate a concise technical summary of this pull request.
          
          PR Data:
          $PR_DATA
          
          Please provide:
          1. A brief overview of what this PR does
          2. Key technical changes
          3. Files modified and their purpose
          4. Any potential concerns or areas for review
          
          Keep it concise and technical. Format your response as plain text without any special formatting."
          
          # Call Claude API
          RESPONSE=$(curl -s https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d @- << 'CLAUDE_EOF'
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 1024,
            "messages": [{
              "role": "user",
              "content": "PROMPT_PLACEHOLDER"
            }]
          }
          CLAUDE_EOF
          )
          
          # Replace placeholder with actual prompt (needs proper escaping)
          ESCAPED_PROMPT=$(echo "$PROMPT" | jq -Rs .)
          RESPONSE=$(curl -s https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            --data-raw "{\"model\":\"claude-3-5-sonnet-20241022\",\"max_tokens\":1024,\"messages\":[{\"role\":\"user\",\"content\":$ESCAPED_PROMPT}]}")
          
          # Extract summary from response
          SUMMARY=$(echo "$RESPONSE" | jq -r '.content[0].text')
          
          # Save summary
          echo "$SUMMARY" > summary.txt
          echo "summary<<SUMMARY_EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "SUMMARY_EOF" >> $GITHUB_OUTPUT
          
          # Also save PR number and title for Confluence
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
          echo "jira_ticket=${{ steps.jira-ticket.outputs.jira_ticket }}" >> $GITHUB_OUTPUT
          echo "has_jira=${{ steps.jira-ticket.outputs.has_jira }}" >> $GITHUB_OUTPUT
          echo "jira_analysis=${{ steps.jira-details.outputs.jira_analysis }}" >> $GITHUB_OUTPUT
          echo "jira_resolution=${{ steps.jira-details.outputs.jira_resolution }}" >> $GITHUB_OUTPUT
          echo "has_jira_details=${{ steps.jira-details.outputs.has_jira_details }}" >> $GITHUB_OUTPUT
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.txt', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## 🤖 AI-Generated PR Summary\n\n${summary}\n\n---\n*Generated by Claude 3.5 Sonnet*`
            });
      
      - name: Push to Confluence
        env:
          CONFLUENCE_URL: https://method.atlassian.net/wiki/api/v2
          CONFLUENCE_USER: a.awasthi@method.me
          CONFLUENCE_API_TOKEN: ${{ secrets.ATLASSIAN_TOKEN }}
          CONFLUENCE_PAGE_ID: 198869144
        run: |
          # Read the summary
          SUMMARY=$(cat summary.txt)
          
          # Get PR details
          PR_NUMBER="${{ steps.ai-summary.outputs.pr_number }}"
          PR_TITLE="${{ steps.ai-summary.outputs.pr_title }}"
          PR_URL="${{ steps.ai-summary.outputs.pr_url }}"
          MERGED_AT="${{ github.event.pull_request.merged_at }}"
          MERGED_BY="${{ github.event.pull_request.merged_by.login }}"
          JIRA_TICKET="${{ steps.ai-summary.outputs.jira_ticket }}"
          HAS_JIRA="${{ steps.ai-summary.outputs.has_jira }}"
          JIRA_ANALYSIS="${{ steps.ai-summary.outputs.jira_analysis }}"
          JIRA_RESOLUTION="${{ steps.ai-summary.outputs.jira_resolution }}"
          HAS_JIRA_DETAILS="${{ steps.ai-summary.outputs.has_jira_details }}"

          echo "========================================="
          echo "DEBUG: Starting Confluence Integration"
          echo "========================================="
          echo "Confluence URL: $CONFLUENCE_URL"
          echo "Page ID: $CONFLUENCE_PAGE_ID"
          echo "User: $CONFLUENCE_USER"
          echo "PR Number: $PR_NUMBER"
          if [ "$HAS_JIRA" = "true" ]; then
            echo "Jira Ticket: $JIRA_TICKET"
          else
            echo "Jira Ticket: None (branch doesn't start with PL)"
          fi
          echo ""
          
          # Get the current page content
          echo "Fetching Confluence page..."
          CURRENT_PAGE=$(curl -s -u "$CONFLUENCE_USER:$CONFLUENCE_API_TOKEN" \
            -X GET \
            "$CONFLUENCE_URL/pages/$CONFLUENCE_PAGE_ID?body-format=atlas_doc_format" \
            -H "Content-Type: application/json")
          
          # Debug: Check if we got valid JSON
          echo "API Response received"
          echo "$CURRENT_PAGE"
          
          # Check if response is valid
          if ! echo "$CURRENT_PAGE" | jq empty 2>/dev/null; then
            echo "❌ Error: Invalid JSON response from Confluence API"
            exit 1
          fi
          
          # Extract current version and body
          CURRENT_VERSION=$(echo "$CURRENT_PAGE" | jq -r '.version.number')
          CURRENT_BODY=$(echo "$CURRENT_PAGE" | jq -r '.body.atlas_doc_format.value')

          echo "BODY IS"
          echo "$CURRENT_BODY"
          echo "Current version: $CURRENT_VERSION"
          
          # Parse existing ADF content
          EXISTING_CONTENT=$(echo "$CURRENT_BODY" | jq -c '.content // []')

          echo "$EXISTING_CONTENT"
          # Escape summary text for JSON (handles newlines, quotes, etc.)
          ESCAPED_SUMMARY=$(echo "$SUMMARY" | jq -Rs .)
          
          # Build Jira URL if ticket exists
          if [ "$HAS_JIRA" = "true" ]; then
            JIRA_URL="https://method.atlassian.net/browse/$JIRA_TICKET"
          fi
          
          # Create the new expand node with PR summary in ADF format
          # Build content array based on whether Jira ticket exists
          if [ "$HAS_JIRA" = "true" ] && [ "$HAS_JIRA_DETAILS" = "true" ]; then
            NEW_EXPAND_NODE=$(jq -n \
              --arg pr_num "$PR_NUMBER" \
              --arg pr_title "$PR_TITLE" \
              --arg merged_at "$MERGED_AT" \
              --arg merged_by "$MERGED_BY" \
              --arg jira_ticket "$JIRA_TICKET" \
              --arg jira_url "$JIRA_URL" \
              --arg jira_analysis "$JIRA_ANALYSIS" \
              --arg jira_resolution "$JIRA_RESOLUTION" \
              --arg pr_url "$PR_URL" \
              --argjson summary "$ESCAPED_SUMMARY" \
              '{
                "type": "expand",
                "attrs": {
                  "title": ("PR #" + $pr_num + ": " + $pr_title)
                },
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": ("Merged on: " + $merged_at)
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": ("Merged by: " + $merged_by)
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Jira Ticket: "
                      },
                      {
                        "type": "text",
                        "text": $jira_ticket,
                        "marks": [
                          {
                            "type": "link",
                            "attrs": {
                              "href": $jira_url
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Analysis Results: ",
                        "marks": [
                          {
                            "type": "strong"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": $jira_analysis
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Resolution Details: ",
                        "marks": [
                          {
                            "type": "strong"
                          }
                        ]
                      },
                      {
                        "type": "text",
                        "text": $jira_resolution
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "PR Link: "
                      },
                      {
                        "type": "text",
                        "text": $pr_url,
                        "marks": [
                          {
                            "type": "link",
                            "attrs": {
                              "href": $pr_url
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "rule"
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": $summary
                      }
                    ]
                  }
                ]
              }')
          elif [ "$HAS_JIRA" = "true" ]; then
            NEW_EXPAND_NODE=$(jq -n \
              --arg pr_num "$PR_NUMBER" \
              --arg pr_title "$PR_TITLE" \
              --arg merged_at "$MERGED_AT" \
              --arg merged_by "$MERGED_BY" \
              --arg jira_ticket "$JIRA_TICKET" \
              --arg jira_url "$JIRA_URL" \
              --arg pr_url "$PR_URL" \
              --argjson summary "$ESCAPED_SUMMARY" \
              '{
                "type": "expand",
                "attrs": {
                  "title": ("PR #" + $pr_num + ": " + $pr_title)
                },
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": ("Merged on: " + $merged_at)
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": ("Merged by: " + $merged_by)
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Jira Ticket: "
                      },
                      {
                        "type": "text",
                        "text": $jira_ticket,
                        "marks": [
                          {
                            "type": "link",
                            "attrs": {
                              "href": $jira_url
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "PR Link: "
                      },
                      {
                        "type": "text",
                        "text": $pr_url,
                        "marks": [
                          {
                            "type": "link",
                            "attrs": {
                              "href": $pr_url
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "rule"
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": $summary
                      }
                    ]
                  }
                ]
              }')
          else
            NEW_EXPAND_NODE=$(jq -n \
              --arg pr_num "$PR_NUMBER" \
              --arg pr_title "$PR_TITLE" \
              --arg merged_at "$MERGED_AT" \
              --arg merged_by "$MERGED_BY" \
              --arg pr_url "$PR_URL" \
              --argjson summary "$ESCAPED_SUMMARY" \
              '{
                "type": "expand",
                "attrs": {
                  "title": ("PR #" + $pr_num + ": " + $pr_title)
                },
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": ("Merged on: " + $merged_at)
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": ("Merged by: " + $merged_by)
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "PR Link: "
                      },
                      {
                        "type": "text",
                        "text": $pr_url,
                        "marks": [
                          {
                            "type": "link",
                            "attrs": {
                              "href": $pr_url
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "type": "rule"
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": $summary
                      }
                    ]
                  }
                ]
              }')
          fi
          
          # Prepend the new expand node to existing content (add to top)
          UPDATED_CONTENT=$(echo "$EXISTING_CONTENT" | jq --argjson new "$NEW_EXPAND_NODE" '[$new] + .')
          
          # Create the complete ADF document
          UPDATED_BODY=$(jq -n \
            --argjson content "$UPDATED_CONTENT" \
            '{
              "version": 1,
              "type": "doc",
              "content": $content
            }')

          echo "$UPDATED_BODY"
          
          # Get page title for update
          PAGE_TITLE=$(echo "$CURRENT_PAGE" | jq -r '.title')
          
          # Update the page with new ADF content
          UPDATE_RESPONSE=$(curl -s -u "$CONFLUENCE_USER:$CONFLUENCE_API_TOKEN" \
            -X PUT \
            "$CONFLUENCE_URL/pages/$CONFLUENCE_PAGE_ID" \
            -H "Content-Type: application/json" \
            -H "Accept: application/json" \
            --data-raw "{\"id\":\"$CONFLUENCE_PAGE_ID\",\"status\":\"current\",\"title\":\"$PAGE_TITLE\",\"body\":{\"representation\":\"atlas_doc_format\",\"value\":$(echo "$UPDATED_BODY" | jq -c | jq -Rs .)},\"version\":{\"number\":$((CURRENT_VERSION + 1)),\"message\":\"Added PR #$PR_NUMBER summary via GitHub Actions\"}}")
          
          # Check if update was successful
          if echo "$UPDATE_RESPONSE" | jq -e '.id' > /dev/null 2>&1; then
            echo "✅ Successfully added collapsible PR #$PR_NUMBER to Confluence page"
          else
            echo "❌ Error updating Confluence page"
            echo "Response: $UPDATE_RESPONSE"
            exit 1
          fi
