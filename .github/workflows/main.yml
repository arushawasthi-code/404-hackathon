name: Generate PR Summary

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:  # Allow manual testing

jobs:
  generate-summary:
    runs-on: ubuntu-latest
    # Only run if the PR was actually merged (not just closed)
    if: github.event.pull_request.merged == true
    permissions:
      contents: read
      pull-requests: write  # Needed to comment on PRs
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better diff context
          
      - name: Get PR details
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            
            // Get PR basic info
            const prInfo = {
              number: pr.number,
              title: pr.title,
              body: pr.body,
              author: pr.user.login,
              base_branch: pr.base.ref,
              head_branch: pr.head.ref,
              created_at: pr.created_at,
              updated_at: pr.updated_at
            };
            
            // Get list of changed files
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const fileChanges = files.data.map(file => ({
              filename: file.filename,
              status: file.status,
              additions: file.additions,
              deletions: file.deletions,
              changes: file.changes,
              patch: file.patch  // The actual diff
            }));
            
            // Get commits
            const commits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const commitMessages = commits.data.map(c => ({
              sha: c.sha.substring(0, 7),
              message: c.commit.message,
              author: c.commit.author.name
            }));
            
            const output = {
              pr: prInfo,
              files: fileChanges,
              commits: commitMessages,
              stats: {
                total_files: files.data.length,
                total_additions: files.data.reduce((sum, f) => sum + f.additions, 0),
                total_deletions: files.data.reduce((sum, f) => sum + f.deletions, 0)
              }
            };
            
            // Save to file for next step
            const fs = require('fs');
            fs.writeFileSync('pr-data.json', JSON.stringify(output, null, 2));
            
            return output;
      
      - name: Generate AI Summary
        id: ai-summary
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_KEY }}
        run: |
          # Read the PR data
          PR_DATA=$(cat pr-data.json)
          
          # Create prompt for Claude
          PROMPT="You are a technical reviewer with 10 years of experience. Generate a concise technical summary of this pull request.
          Use the documentation in the below URL to generate the summary in Atlassian Documentation format (using elements like expandible sections when appropriate):
          https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/

          The Atlassian Document Format is a JSON object that follows the below schema. The generated summary MUST FOLLOW THIS SCHEMA:
          http://go.atlassian.com/adf-json-schema
          
          PR Data:
          $PR_DATA
          
          Please provide:
          1. A brief overview of what this PR does
          2. Key technical changes
          3. Files modified and their purpose
          4. Any potential concerns or areas for review
          
          Keep it concise and technical."
          
          # Call Claude API
          RESPONSE=$(curl -s https://api.anthropic.com/v1/messages \
            -H "Content-Type: application/json" \
            -H "x-api-key: $ANTHROPIC_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -d @- << EOF
          {
            "model": "claude-3-5-sonnet-20241022",
            "max_tokens": 1024,
            "messages": [{
              "role": "user",
              "content": $(echo "$PROMPT" | jq -Rs .)
            }]
          }
          EOF
          )
          
          # Extract summary from response
          SUMMARY=$(echo "$RESPONSE" | jq -r '.content[0].text')
          
          # Save summary
          echo "$SUMMARY" > summary.txt
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Also save PR number and title for Confluence
          echo "pr_number=${{ github.event.pull_request.number }}" >> $GITHUB_OUTPUT
          echo "pr_title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr_url=${{ github.event.pull_request.html_url }}" >> $GITHUB_OUTPUT
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('summary.txt', 'utf8');
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## ü§ñ AI-Generated PR Summary\n\n${summary}\n\n---\n*Generated by Claude 3.5 Sonnet*`
            });
      
      - name: Push to Confluence
        env:
          CONFLUENCE_URL: https://method.atlassian.net/wiki/api/v2
          CONFLUENCE_USER: a.awasthi@method.me
          CONFLUENCE_API_TOKEN: ${{ secrets.ATLASSIAN_TOKEN }}
          CONFLUENCE_PAGE_ID: 198869144
        run: |
          # Read the summary
          SUMMARY=$(cat summary.txt)

          
          
          # Get PR details
          PR_NUMBER="${{ steps.ai-summary.outputs.pr_number }}"
          PR_TITLE="${{ steps.ai-summary.outputs.pr_title }}"
          PR_URL="${{ steps.ai-summary.outputs.pr_url }}"
          MERGED_AT="${{ github.event.pull_request.merged_at }}"
          MERGED_BY="${{ github.event.pull_request.merged_by.login }}"

          echo "========================================="
          echo "DEBUG: Starting Confluence Integration"
          echo "========================================="
          echo "Confluence URL: $CONFLUENCE_URL"
          echo "Page ID: $CONFLUENCE_PAGE_ID"
          echo "User: $CONFLUENCE_USER"
          echo "PR Number: $PR_NUMBER"
          echo ""
          
          # Get the current page content
          echo "Fetching Confluence page..."
          CURRENT_PAGE=$(curl -s -u "$CONFLUENCE_USER:$CONFLUENCE_API_TOKEN" \
            -X GET \
            "$CONFLUENCE_URL/pages/$CONFLUENCE_PAGE_ID" \
            -H "Content-Type: application/json")
          
          # Debug: Check if we got valid JSON
          echo "API Response:"
          echo "$CURRENT_PAGE"
          
          # Check if response is valid
          if ! echo "$CURRENT_PAGE" | jq empty 2>/dev/null; then
            echo "‚ùå Error: Invalid JSON response from Confluence API"
            exit 1
          fi
          
          # Extract current version and body
          CURRENT_VERSION=$(echo "$CURRENT_PAGE" | jq -r '.version.number')
          CURRENT_BODY=$(echo "$CURRENT_PAGE" | jq -r '.body.storage.value')
          
          # Escape summary for HTML
          ESCAPED_SUMMARY=$(echo "$SUMMARY" | sed 's/&/\&amp;/g; s/</\&lt;/g; s/>/\&gt;/g; s/"/\&quot;/g' | sed ':a;N;$!ba;s/\n/<br\/>/g')
          
          # Create new PR entry
          NEW_ENTRY="<h3>PR #$PR_NUMBER: <a href=\"$PR_URL\">$PR_TITLE</a></h3>
          <p><em>Merged on $MERGED_AT by $MERGED_BY</em></p>
          <p>$ESCAPED_SUMMARY</p>
          <hr/>"
          
          # Simply append to the end of the page
          UPDATED_BODY="$CURRENT_BODY
          $NEW_ENTRY"
          
          # Update the page
          curl -s -u "$CONFLUENCE_USER:$CONFLUENCE_API_TOKEN" \
            -X PUT \
            "$CONFLUENCE_URL/pages/$CONFLUENCE_PAGE_ID" \
            -H "Content-Type: application/json" \
            -d @- << EOF
          {
            "version": {
              "number": $((CURRENT_VERSION + 1))
            },
            "status" : "current",
            "title": "$(echo "$CURRENT_PAGE" | jq -r '.title')",
            "type": "page",
            "id" : "$(echo "$CONFLUENCE_PAGE_ID")",
            "body": {
              "storage": {
                "value": $(echo "$UPDATED_BODY" | jq -Rs .),
                "representation": "atlas_doc_format"
              }
            }
          }
          EOF
          
          echo "‚úÖ Successfully appended PR #$PR_NUMBER to Confluence page"
